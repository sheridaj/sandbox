import HelperFunctions as hf
from datetime import date
from collections import Counter as mset

def problem11():
	g = []
	g.append("08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08".split())
	g.append("49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00".split())
	g.append("81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65".split())
	g.append("52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91".split())
	g.append("22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80".split())
	g.append("24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50".split())
	g.append("32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70".split())
	g.append("67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21".split())
	g.append("24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72".split())
	g.append("21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95".split())
	g.append("78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92".split())
	g.append("16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57".split())
	g.append("86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58".split())
	g.append("19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40".split())
	g.append("04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66".split())
	g.append("88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69".split())
	g.append("04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36".split())
	g.append("20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16".split())
	g.append("20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54".split())
	g.append("01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48".split())

	biggest = 0
	for i in range(20):
		for j in range(20):
			g[i][j] = int(g[i][j])
	#Loop over every possible starting point
	for i in range(20):
		for j in range(20):
			#Check Down
			if i < 17:
				prod = g[i][j]*g[i+1][j]*g[i+2][j]*g[i+3][j]
				if prod > biggest: biggest = prod
			#Check Right
			if j < 17:
				prod = g[i][j]*g[i][j+1]*g[i][j+2]*g[i][j+3]
				if prod > biggest: biggest = prod
			#Check RightDown
			if i < 17 and j < 17:
				prod = g[i][j]*g[i+1][j+1]*g[i+2][j+2]*g[i+3][j+3]
				if prod > biggest: biggest = prod
			#Check LeftDown
			if i < 17 and j > 2:
				prod = g[i][j]*g[i+1][j-1]*g[i+2][j-2]*g[i+3][j-3]
				if prod > biggest: biggest = prod
	return biggest

def problem12():
	flag = True
	n = 1
	i = 2
	while True:
		number = 1
		nDiv = mset(hf.primeFactorization(n))
		exp = nDiv.most_common()
		for ex in exp:
			number *= ex[1]+1
		if number > 500:
			return n
		n += i
		i += 1

def problem13():
	n = []
	n.append(list('37107287533902102798797998220837590246510135740250'))
	n.append(list('46376937677490009712648124896970078050417018260538'))
	n.append(list('74324986199524741059474233309513058123726617309629'))
	n.append(list('91942213363574161572522430563301811072406154908250'))
	n.append(list('23067588207539346171171980310421047513778063246676'))
	n.append(list('89261670696623633820136378418383684178734361726757'))
	n.append(list('28112879812849979408065481931592621691275889832738'))
	n.append(list('44274228917432520321923589422876796487670272189318'))
	n.append(list('47451445736001306439091167216856844588711603153276'))
	n.append(list('70386486105843025439939619828917593665686757934951'))
	n.append(list('62176457141856560629502157223196586755079324193331'))
	n.append(list('64906352462741904929101432445813822663347944758178'))
	n.append(list('92575867718337217661963751590579239728245598838407'))
	n.append(list('58203565325359399008402633568948830189458628227828'))
	n.append(list('80181199384826282014278194139940567587151170094390'))
	n.append(list('35398664372827112653829987240784473053190104293586'))
	n.append(list('86515506006295864861532075273371959191420517255829'))
	n.append(list('71693888707715466499115593487603532921714970056938'))
	n.append(list('54370070576826684624621495650076471787294438377604'))
	n.append(list('53282654108756828443191190634694037855217779295145'))
	n.append(list('36123272525000296071075082563815656710885258350721'))
	n.append(list('45876576172410976447339110607218265236877223636045'))
	n.append(list('17423706905851860660448207621209813287860733969412'))
	n.append(list('81142660418086830619328460811191061556940512689692'))
	n.append(list('51934325451728388641918047049293215058642563049483'))
	n.append(list('62467221648435076201727918039944693004732956340691'))
	n.append(list('15732444386908125794514089057706229429197107928209'))
	n.append(list('55037687525678773091862540744969844508330393682126'))
	n.append(list('18336384825330154686196124348767681297534375946515'))
	n.append(list('80386287592878490201521685554828717201219257766954'))
	n.append(list('78182833757993103614740356856449095527097864797581'))
	n.append(list('16726320100436897842553539920931837441497806860984'))
	n.append(list('48403098129077791799088218795327364475675590848030'))
	n.append(list('87086987551392711854517078544161852424320693150332'))
	n.append(list('59959406895756536782107074926966537676326235447210'))
	n.append(list('69793950679652694742597709739166693763042633987085'))
	n.append(list('41052684708299085211399427365734116182760315001271'))
	n.append(list('65378607361501080857009149939512557028198746004375'))
	n.append(list('35829035317434717326932123578154982629742552737307'))
	n.append(list('94953759765105305946966067683156574377167401875275'))
	n.append(list('88902802571733229619176668713819931811048770190271'))
	n.append(list('25267680276078003013678680992525463401061632866526'))
	n.append(list('36270218540497705585629946580636237993140746255962'))
	n.append(list('24074486908231174977792365466257246923322810917141'))
	n.append(list('91430288197103288597806669760892938638285025333403'))
	n.append(list('34413065578016127815921815005561868836468420090470'))
	n.append(list('23053081172816430487623791969842487255036638784583'))
	n.append(list('11487696932154902810424020138335124462181441773470'))
	n.append(list('63783299490636259666498587618221225225512486764533'))
	n.append(list('67720186971698544312419572409913959008952310058822'))
	n.append(list('95548255300263520781532296796249481641953868218774'))
	n.append(list('76085327132285723110424803456124867697064507995236'))
	n.append(list('37774242535411291684276865538926205024910326572967'))
	n.append(list('23701913275725675285653248258265463092207058596522'))
	n.append(list('29798860272258331913126375147341994889534765745501'))
	n.append(list('18495701454879288984856827726077713721403798879715'))
	n.append(list('38298203783031473527721580348144513491373226651381'))
	n.append(list('34829543829199918180278916522431027392251122869539'))
	n.append(list('40957953066405232632538044100059654939159879593635'))
	n.append(list('29746152185502371307642255121183693803580388584903'))
	n.append(list('41698116222072977186158236678424689157993532961922'))
	n.append(list('62467957194401269043877107275048102390895523597457'))
	n.append(list('23189706772547915061505504953922979530901129967519'))
	n.append(list('86188088225875314529584099251203829009407770775672'))
	n.append(list('11306739708304724483816533873502340845647058077308'))
	n.append(list('82959174767140363198008187129011875491310547126581'))
	n.append(list('97623331044818386269515456334926366572897563400500'))
	n.append(list('42846280183517070527831839425882145521227251250327'))
	n.append(list('55121603546981200581762165212827652751691296897789'))
	n.append(list('32238195734329339946437501907836945765883352399886'))
	n.append(list('75506164965184775180738168837861091527357929701337'))
	n.append(list('62177842752192623401942399639168044983993173312731'))
	n.append(list('32924185707147349566916674687634660915035914677504'))
	n.append(list('99518671430235219628894890102423325116913619626622'))
	n.append(list('73267460800591547471830798392868535206946944540724'))
	n.append(list('76841822524674417161514036427982273348055556214818'))
	n.append(list('97142617910342598647204516893989422179826088076852'))
	n.append(list('87783646182799346313767754307809363333018982642090'))
	n.append(list('10848802521674670883215120185883543223812876952786'))
	n.append(list('71329612474782464538636993009049310363619763878039'))
	n.append(list('62184073572399794223406235393808339651327408011116'))
	n.append(list('66627891981488087797941876876144230030984490851411'))
	n.append(list('60661826293682836764744779239180335110989069790714'))
	n.append(list('85786944089552990653640447425576083659976645795096'))
	n.append(list('66024396409905389607120198219976047599490197230297'))
	n.append(list('64913982680032973156037120041377903785566085089252'))
	n.append(list('16730939319872750275468906903707539413042652315011'))
	n.append(list('94809377245048795150954100921645863754710598436791'))
	n.append(list('78639167021187492431995700641917969777599028300699'))
	n.append(list('15368713711936614952811305876380278410754449733078'))
	n.append(list('40789923115535562561142322423255033685442488917353'))
	n.append(list('44889911501440648020369068063960672322193204149535'))
	n.append(list('41503128880339536053299340368006977710650566631954'))
	n.append(list('81234880673210146739058568557934581403627822703280'))
	n.append(list('82616570773948327592232845941706525094512325230608'))
	n.append(list('22918802058777319719839450180888072429661980811197'))
	n.append(list('77158542502016545090413245809786882778948721859617'))
	n.append(list('72107838435069186155435662884062257473692284509516'))
	n.append(list('20849603980134001723930671666823555245252804609722'))
	n.append(list('53503534226472524250874054075591789781264330331690'))

	for i in n:
		i.reverse()

	answer = []
	remainder = 0
	for i in range(len(n[0])):
		sum = 0
		for j in n:
			sum += int(j[i])
		sum += remainder
		answer.append(str(sum)[-1])
		remainder = int(str(sum)[:-1])
	r = list(str(remainder))
	r.reverse()
	for item in r: answer.append(item)
	answer.reverse()
	a = ''.join(answer)
	return a[:10]

def problem14():
	length = 0
	num = 0
	for i in range(1,1000000):
		x = i
		l = 1
		while x != 1:
			if x%2==0: x /= 2
			else: x = (x*3)+1
			l += 1
		if l > length:
			length = l
			num = i
	return num

def problem15(n,m):
	#Inefficient (but right!)
	cN = 1 if n == 1 else problem15(n-1,m)
	cM = 1 if m == 1 else problem15(n,m-1)
	return cN+cM

def problem15x2(n,m):
	#Slightly more efficient (and also correct) but not good enough
	if n==m: return 2 if n==1 else 2*problem15x2(n-1,m)
	else:
		cN = 1 if n == 1 else problem15x2(n-1,m)
		cM = 1 if m == 1 else problem15x2(n,m-1)
		return cN+cM

def problem15x3(n):
	m = [[1,i+1] for i in range(n)]
	x = 1
	while x<n:
		x += 1
		for j in range(n):
			m[j].append(1 if j==0 else m[j-1][x]+m[j][x-1])
	return 2*m[-1][-1]

def problem16(n):
	s = '2'
	for i in range(n-1):
		new = ''
		r = 0
		for j in range(len(s)):
			x = 2*int(s[(j+1)*-1])+r
			new = str(x)[-1] + new
			r = 0 if len(str(x)) == 1 else int(str(x)[0])
		if r != 0: new = str(r) + new
		s = new
	sum = 0
	for n in s:
		sum += int(n)
	return sum

def problem17():
	dict = {'one':191,
			'two':90+100,
			'three':90+100,
			'four':90+100,
			'five':90+100,
			'six':90+100,
			'seven':90+100,
			'eight':90+100,
			'nine':90+100,
			'ten':10,
			'eleven':10,
			'twelve':10,
			'thirteen':10,
			'fourteen':10,
			'fifteen':10,
			'sixteen':10,
			'seventeen':10,
			'eighteen':10,
			'nineteen':10,
			'twenty':100,
			'thirty':100,
			'forty':100,
			'fifty':100,
			'sixty':100,
			'seventy':100,
			'eighty':100,
			'ninety':100,
			'hundred':900,
			'and':99*9,
			'thousand':1}
	sum = 0
	for k,v in dict.iteritems():
		sum += len(k)*v
	return sum

def problem18():
	m = [[75],
		[95,64],
		[17,47,82],
		[18,35,87,10],
		[20,04,82,47,65],
		[19,01,23,75,03,34],
		[88,02,77,73,07,63,67],
		[99,65,04,28,06,16,70,92],
		[41,41,26,56,83,40,80,70,33],
		[41,48,72,33,47,32,37,16,94,29],
		[53,71,44,65,25,43,91,52,97,51,14],
		[70,11,33,28,77,73,17,78,39,68,17,57],
		[91,71,52,38,17,14,91,43,58,50,27,29,48],
		[63,66,04,68,89,53,67,30,73,16,69,87,40,31],
		[04,62,98,27,23,9,70,98,73,93,38,53,60,04,23]]
	s = []
	for i in range(len(m)):
		s.append([])
		for j in range(len(m[i])):
			if i == 0: s[i].append(m[i][j])
			else:
				p1 = s[i-1][j-1] if j > 0 else 0
				p2 = s[i-1][j] if j < i else 0
				s[i].append(max(p1,p2)+m[i][j])
	return max(s[-1])

def problem19():
	sum = 0
	for y in range(1901,2001):
		for m in range(1,13):
			if date(y, m, 1).isoweekday() == 7:
				sum += 1
	return sum

def problem20(n):
	p = '1'
	for i in range(1,n+1):
		r = 0
		new = ''
		for j in range(len(p)):
			x = i*int(p[(j+1)*-1])+r
			new = str(x)[-1] + new
			r = 0 if len(str(x)) == 1 else int(str(x)[:-1])
		if r != 0: new = str(r) + new
		p = new
	sum = 0
	for n in p:
		sum += int(n)
	return sum

def main():
#	print 'Problem 11 %s' % problem11()
#	print 'Problem 12 %s' % problem12() #Not terrible, but takes some time
#	print 'Problem 13 %s' % problem13()
#	print 'Problem 14 %s' % problem14() #Fine, but non-trivial
#	print 'Problem 15 %s' % problem15x3(20)
#	print 'Problem 16 %s' % problem16(1000)
#	print 'Problem 17 %s' % problem17()
#	print 'Problem 18 %s' % problem18()
#	print 'Problem 19 %s' % problem19()
	print 'Problem 20 %s' % problem20(100)

if __name__ == '__main__':
	main()