//
//  DataModel.swift
//
//  Created by signals on {{ today.strftime('%m/%d/%Y') }}.

import Foundation
import CoreData
import RestKit

typealias RestKitSuccess = (operation: RKObjectRequestOperation!, result: RKMappingResult!) -> Void
typealias RestKitError = (operation: RKObjectRequestOperation!, error: NSError!) -> Void

protocol DataModelDelegate {
  func getBaseURLString() -> String
  func getAccessToken() -> String
}

class DataModel: NSObject {
  var delegate: DataModelDelegate?

  class func sharedDataModel() -> DataModel {
    struct Static {
      static var __sharedDataModel: DataModel? = nil
      static var onceToken: dispatch_once_t = 0
    }

    dispatch_once(&Static.onceToken) {
      Static.__sharedDataModel = DataModel.init()
    }

    return Static.__sharedDataModel!
  }

  func setup(delegate: DataModelDelegate) {
    // Initialize RestKit
    let _delegate = delegate
    self.delegate = delegate
    let baseURL = NSURL(string: _delegate.getBaseURLString())
    let objectManager = RKObjectManager(baseURL: baseURL)

    // Enable Activity Indicator Spinner
    AFNetworkActivityIndicatorManager.sharedManager().enabled = true

    // Initialize managed object store
    let managedObjectModel = NSManagedObjectModel.mergedModelFromBundles(nil)
    let managedObjectStore = RKManagedObjectStore(managedObjectModel: managedObjectModel)

    objectManager.managedObjectStore = managedObjectStore

    // MARK: RestKit Entity Mappings
    {% for name, data_object in schema.data_objects.iteritems() %}
      {% if 'Parameters' not in name %}
        {% include 'entity_mapping.j2' %}

      {% endif %}
    {% endfor %}

    // MARK: RestKit Entity Relationship Mappings
    // We place the relationship mappings after the entities so that we don't need to worry about ordering
    {% for data_object in schema.data_objects.itervalues() %}
      {% for relationship in data_object.relationships %}
        {% include 'relationship_mapping.j2' %}

      {% endfor %}
    {% endfor %}

    // MARK: RestKit URL Descriptors
    {% for url in schema.urls %}
    {% for endpoint in endpoints %}
      {% if url[endpoint] %}
        {% with api = url[endpoint] %}
          {% if endpoint in ['patch', 'post'] %}
            {% include 'descriptors/request.j2' %}


          {% endif %}
          {% if endpoint in ['get', 'patch', 'post'] %}
            {% include 'descriptors/response.j2' %}


          {% endif %}
        {% endwith %}
      {% endif %}
    {% endfor %}
    {% endfor %}

    /**
    Complete Core Data stack initialization
    */
    managedObjectStore.createPersistentStoreCoordinator()
    let storePath = (RKApplicationDataDirectory() as NSString).stringByAppendingPathComponent("{{ project_name }}.sqlite")

    do {
      try managedObjectStore.addSQLitePersistentStoreAtPath(storePath, fromSeedDatabaseAtPath: nil, withConfiguration: nil, options: nil)
    } catch {
      // Problem creating persistent store, wipe it since there was probably a core data change
      // Causes runtime crash if still unable to create persistant storage
      try! NSFileManager.defaultManager().removeItemAtPath(storePath)
      try! managedObjectStore.addSQLitePersistentStoreAtPath(storePath, fromSeedDatabaseAtPath: nil, withConfiguration: nil, options: nil)
    }

    // Create the managed object contexts
    managedObjectStore.createManagedObjectContexts()

    // Configure a managed object cache to ensure we do not create duplicate objects
    managedObjectStore.managedObjectCache = RKInMemoryManagedObjectCache(managedObjectContext: managedObjectStore.persistentStoreManagedObjectContext)
  }

  // MARK: API Calls
  {% for url in schema.urls -%}
  {% for endpoint in endpoints %}
    {% if url[endpoint] %}
      {% with api = url[endpoint] %}
        {% include 'api_method.j2' %}


      {% endwith %}
    {% endif %}
  {% endfor %}
  {% endfor %}
}